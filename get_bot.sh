#!/bin/bash

# ==============================================================================
# == GJTeam Bot & Web Panel - Ultimate One-Line Installer for Ubuntu 22.04+
# ==
# == 运行: curl -fsSL https://your-domain.com/get_bot.sh | sudo bash
# ==============================================================================

# --- 脚本设置 ---
set -e
set -o pipefail

# --- 变量定义 ---
# 【【【你需要修改这里】】】
GIT_REPO_URL="https://github.com/PuneetGOTO/WEBVABOT.git" # 你的公开Git仓库地址
PROJECT_DIR_NAME="GJTEAM-BOT" # Git仓库克隆下来后的文件夹名
BOT_USER="gjteambot"
PYTHON_COMMAND="python3"
SERVICE_NAME="gjteam-bot"

# --- 辅助函数 ---
log_info() { echo -e "\033[34m[INFO]\033[0m $1"; }
log_success() { echo -e "\033[32m[SUCCESS]\033[0m $1"; }
log_warn() { echo -e "\033[33m[WARNING]\033[0m $1"; }
log_error() { echo -e "\033[31m[ERROR]\033[0m $1"; }
prompt_input() { read -p "$(echo -e "\033[33m[INPUT]\033[0m $1: ")"; }
prompt_secret() { read -sp "$(echo -e "\033[33m[INPUT]\033[0m $1 (输入将隐藏): ")"; echo; }

# --- 脚本开始 ---
log_info "GJTeam Bot & Web Panel 终极一键部署脚本启动..."

# 1. 检查权限
if [ "$(id -u)" -ne 0 ]; then
    log_error "此脚本需要以 root 权限运行。请使用 'sudo'。"
    exit 1
fi

# 2. 【增强】自动更新系统
log_info "正在更新系统包... 这可能需要几分钟。"
apt-get update
apt-get upgrade -y
log_success "系统更新完成。"

# 3. 【增强】交互式获取所有配置信息
log_info "我们需要一些信息来完成所有配置..."
echo "------------------------------------------------------------"
prompt_input "请输入您用于访问Web面板的域名 (例如: bot.example.com)"
DOMAIN_NAME="$REPLY"
prompt_input "请输入您的Discord机器人Token"
DISCORD_BOT_TOKEN="$REPLY"
prompt_input "请输入机器人重启密码 (/管理 restart)"
BOT_RESTART_PASSWORD="$REPLY"
prompt_input "请输入您的DeepSeek API Key"
DEEPSEEK_API_KEY="$REPLY"
prompt_input "请输入您的支付宝应用APP ID"
ALIPAY_APP_ID="$REPLY"
prompt_input "请输入支付宝公钥内容 (用于SDK)"
ALIPAY_PUBLIC_KEY_FOR_SDK_CONTENT="$REPLY"
prompt_input "请输入支付宝公KEY内容 (用于回调验签)"
ALIPAY_PUBLIC_KEY_CONTENT_FOR_CALLBACK_VERIFY="$REPLY"
prompt_secret "请输入Web面板超级管理员密码"
WEB_ADMIN_PASSWORD="$REPLY"
prompt_input "请输入您的Discord OAuth2应用的Client ID"
DISCORD_CLIENT_ID="$REPLY"
prompt_input "请输入您的Discord OAuth2应用的Client Secret"
DISCORD_CLIENT_SECRET="$REPLY"
prompt_input "请输入接收通知的Discord频道ID (可选, 可留空)"
RECHARGE_ADMIN_NOTIFICATION_CHANNEL_ID="$REPLY"
log_info "请输入您的支付宝应用私钥，然后按 Ctrl+D 结束输入："
ALIPAY_PRIVATE_KEY_CONTENT=$(cat)
echo "------------------------------------------------------------"
log_info "信息收集完成。"

# 检查关键信息是否为空
if [ -z "$DOMAIN_NAME" ] || [ -z "$DISCORD_BOT_TOKEN" ] || [ -z "$WEB_ADMIN_PASSWORD" ]; then
    log_error "域名、机器人Token和Web面板密码是必填项。安装中止。"
    exit 1
fi

# 4. 安装系统级依赖
log_info "正在安装必要的系统依赖..."
apt-get install -y git python3-pip python3-venv nginx ffmpeg build-essential certbot python3-certbot-nginx
log_success "系统依赖安装完成。"

# 5. 创建专用用户
if id "$BOT_USER" &>/dev/null; then
    log_info "用户 '$BOT_USER' 已存在。"
else
    log_info "正在创建专用的系统用户 '$BOT_USER'..."
    useradd -r -m -d /home/$BOT_USER -s /bin/bash $BOT_USER
    log_success "用户 '$BOT_USER' 创建成功。"
fi

# 6. 克隆项目代码
INSTALL_DIR="/home/$BOT_USER/$PROJECT_DIR_NAME"
log_info "正在从 $GIT_REPO_URL 克隆项目到 $INSTALL_DIR..."
if [ -d "$INSTALL_DIR" ]; then
    log_warn "发现旧的安装目录，将进行备份并重新克隆..."
    mv "$INSTALL_DIR" "${INSTALL_DIR}.bak.$(date +%s)"
fi
su - $BOT_USER -c "git clone $GIT_REPO_URL $INSTALL_DIR"
log_success "项目代码克隆成功。"

# 7. 设置 Python 虚拟环境
log_info "正在设置 Python 虚拟环境并安装依赖..."
su - $BOT_USER -c "cd $INSTALL_DIR && $PYTHON_COMMAND -m venv venv"
su - $BOT_USER -c "cd $INSTALL_DIR && source venv/bin/activate && pip install --upgrade pip && pip install -r requirements.txt"
log_success "Python 依赖安装完成。"

# 8. 【增强】自动生成 .env 和私钥文件
log_info "正在根据您的输入自动生成配置文件..."
URL_SCHEME="http"
ALIPAY_NOTIFY_URL="${URL_SCHEME}://${DOMAIN_NAME}/alipay/notify"
DISCORD_REDIRECT_URI="${URL_SCHEME}://${DOMAIN_NAME}/callback"

echo "$ALIPAY_PRIVATE_KEY_CONTENT" > $INSTALL_DIR/alipay_private_key.pem

cat > $INSTALL_DIR/.env <<EOF
# This file is auto-generated by the installation script.
DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
BOT_RESTART_PASSWORD=${BOT_RESTART_PASSWORD}
DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
ALIPAY_APP_ID=${ALIPAY_APP_ID}
ALIPAY_PRIVATE_KEY_PATH=${INSTALL_DIR}/alipay_private_key.pem
ALIPAY_PUBLIC_KEY_FOR_SDK_CONTENT=${ALIPAY_PUBLIC_KEY_FOR_SDK_CONTENT}
ALIPAY_PUBLIC_KEY_CONTENT_FOR_CALLBACK_VERIFY=${ALIPAY_PUBLIC_KEY_CONTENT_FOR_CALLBACK_VERIFY}
ALIPAY_NOTIFY_URL=${ALIPAY_NOTIFY_URL}
WEB_ADMIN_PASSWORD=${WEB_ADMIN_PASSWORD}
DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET}
DISCORD_REDIRECT_URI=${DISCORD_REDIRECT_URI}
RECHARGE_ADMIN_NOTIFICATION_CHANNEL_ID=${RECHARGE_ADMIN_NOTIFICATION_CHANNEL_ID}
RECHARGE_CONVERSION_RATE=100
ECONOMY_DEFAULT_BALANCE=100
MIN_RECHARGE_AMOUNT=1.0
MAX_RECHARGE_AMOUNT=10000.0
EOF

# 【【【关键修复】】】
chown -R $BOT_USER:$BOT_USER /home/$BOT_USER
chmod 755 /home/$BOT_USER  # <--- 修复 Nginx 403 Forbidden 错误
chmod 600 $INSTALL_DIR/.env
chmod 600 $INSTALL_DIR/alipay_private_key.pem
log_success "配置文件和权限已安全设置。"

# 9. 配置 Nginx
log_info "正在配置 Nginx 作为反向代理..."
cat > /etc/nginx/sites-available/$SERVICE_NAME <<EOF
server {
    listen 80;
    server_name $DOMAIN_NAME;

    root /var/www/html;
    index index.html index.htm;

    location / {
        proxy_pass http://127.0.0.1:5000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    location /my-custom-socket-path {
        proxy_pass http://127.0.0.1:5000/my-custom-socket-path;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
    }
    
    location /alipay/notify {
        proxy_pass http://127.0.0.1:8080;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
    }

    location /static/ {
        alias ${INSTALL_DIR}/static/;
        expires 1d;
        add_header Cache-Control "public";
    }
}
EOF

ln -sf /etc/nginx/sites-available/$SERVICE_NAME /etc/nginx/sites-enabled/
rm -f /etc/nginx/sites-enabled/default
systemctl restart nginx
log_success "Nginx (HTTP) 配置完成。"

# 10. 【增强】自动申请 SSL 证书
log_info "正在尝试为 $DOMAIN_NAME 自动申请 SSL 证书..."
# 提示用户确认DNS记录
log_warn "在继续之前，请确保您的域名 '$DOMAIN_NAME' 的 A 记录已正确指向本服务器的 IP 地址。"
prompt_input "确认DNS设置无误后，请按 Enter 键继续..."

if certbot --nginx --non-interactive --agree-tos -d $DOMAIN_NAME -m admin@$DOMAIN_NAME --redirect; then
    log_success "SSL 证书申请并配置成功！"
    log_info "正在更新配置文件中的 URL 为 HTTPS..."
    sed -i 's|http://|https://|g' $INSTALL_DIR/.env
    log_success "URL 更新完成。"
else
    log_warn "SSL 证书自动申请失败。可能是DNS记录尚未生效，或达到了Let's Encrypt的速率限制。"
    log_warn "系统将继续以 HTTP 模式运行。你可以稍后手动运行 'sudo certbot --nginx -d $DOMAIN_NAME' 重试。"
fi

# 11. 创建并配置 systemd 服务
log_info "正在创建 systemd 服务..."
cat > /etc/systemd/system/$SERVICE_NAME.service <<EOF
[Unit]
Description=GJTeam Discord Bot and Web Panel
After=network.target

[Service]
User=$BOT_USER
Group=$BOT_USER
WorkingDirectory=$INSTALL_DIR
ExecStart=$INSTALL_DIR/venv/bin/python3 $INSTALL_DIR/role_manager_bot.py
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

log_success "systemd 服务文件创建成功。"

# 12. 最终启动
log_info "正在启用并启动机器人服务..."
systemctl daemon-reload
systemctl enable $SERVICE_NAME
systemctl start $SERVICE_NAME

log_success "机器人服务已启动！"

# --- 最终说明 ---
echo -e "\n\033[1;32m========================= 部署完成！ =========================\033[0m"
echo ""
echo -e "你的机器人和Web面板现在应该正在运行中！"
echo -e "你可以通过以下地址访问你的Web面板："
echo -e "   \033[1;36mhttps://$DOMAIN_NAME\033[0m"
echo ""
echo -e "\033[1;34m常用命令:\033[0m"
echo -e "  - \033[1m查看机器人实时日志\033[0m: \033[36msudo journalctl -u $SERVICE_NAME -f\033[0m"
echo -e "  - \033[1m重启机器人\033[0m: \033[36msudo systemctl restart $SERVICE_NAME\033[0m"
echo -e "  - \033[1m停止机器人\033[0m: \033[36msudo systemctl stop $SERVICE_NAME\033[0m"
echo -e "  - \033[1m编辑配置文件\033[0m: \033[36msudo nano $INSTALL_DIR/.env\033[0m (修改后需重启)"
echo ""
echo -e "如果遇到任何问题，请使用 'journalctl' 命令查看日志来排查。"
echo -e "\033[1;32m============================================================\033[0m"
